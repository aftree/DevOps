[
{
	"uri": "https://devops.lijun.in/zh/docker/docker-registry/",
	"title": "Docker Registry",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://devops.lijun.in/zh/ansible/",
	"title": "O - Ansible",
	"tags": [],
	"description": "",
	"content": "章节 1 基础 了解该 Hugo 主题的特点以及背后的核心概念。\n"
},
{
	"uri": "https://devops.lijun.in/zh/docker/",
	"title": "O - Docker",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://devops.lijun.in/zh/gitlab/",
	"title": "O - Gitlab",
	"tags": [],
	"description": "",
	"content": "章节 1 基础 了解该 Hugo 主题的特点以及背后的核心概念。\n"
},
{
	"uri": "https://devops.lijun.in/zh/jenkins/",
	"title": "O - Jenkins",
	"tags": [],
	"description": "",
	"content": "章节 1 基础 了解该 Hugo 主题的特点以及背后的核心概念。\n"
},
{
	"uri": "https://devops.lijun.in/zh/maven/",
	"title": "O - Maven",
	"tags": [],
	"description": "",
	"content": "章节 1 基础 了解该 Hugo 主题的特点以及背后的核心概念。\n"
},
{
	"uri": "https://devops.lijun.in/zh/mysql/",
	"title": "O - MySQL",
	"tags": [],
	"description": "",
	"content": "章节 1 基础 了解该 Hugo 主题的特点以及背后的核心概念。\n"
},
{
	"uri": "https://devops.lijun.in/zh/prometheus/",
	"title": "O - Prometheus",
	"tags": [],
	"description": "",
	"content": "章节 1 基础 了解该 Hugo 主题的特点以及背后的核心概念。\n"
},
{
	"uri": "https://devops.lijun.in/zh/terraform/",
	"title": "O - Terraform",
	"tags": [],
	"description": "",
	"content": "章节 1 基础 了解该 Hugo 主题的特点以及背后的核心概念。\n"
},
{
	"uri": "https://devops.lijun.in/zh/zabbix/",
	"title": "O - Zabbix",
	"tags": [],
	"description": "",
	"content": "章节 1 基础 了解该 Hugo 主题的特点以及背后的核心概念。\n"
},
{
	"uri": "https://devops.lijun.in/zh/kvm/",
	"title": "O - KVM",
	"tags": [],
	"description": "",
	"content": "章节 1 基础 了解该 Hugo 主题的特点以及背后的核心概念。\n"
},
{
	"uri": "https://devops.lijun.in/zh/jenkins/requirements/",
	"title": "jenkins",
	"tags": [],
	"description": "",
	"content": " 自由风格 General Grooyy\\Shell\\Python脚本语言 参数化构建过程\n Active Choices Parameter  Groovy Script    源码管理 构建触发器 构建环境 Pre Steps Build Post Steps 构建设置 构建后操作 发布、回滚 插件\n Active Choices Plug-in   Pipeline General 构建触发器 高级项目选项 流水线  Pipeline Script Pipeline script from SCM -\u0026gt; Jenkinsfile 视图 Jobs config.xml 配置文件 插件  "
},
{
	"uri": "https://devops.lijun.in/zh/mysql/requirements/mysql%E6%93%8D%E4%BD%9C/",
	"title": "MySQL操作",
	"tags": [],
	"description": "",
	"content": " 命令行：mysql\nmysql -u root -p -h 10.0.0.1 -P 3306 --host=host_name, -h host_name：服务端地址； --user=user_name, -u user_name：用户名； --port=port_num, -P port_num：服务端端口； --socket=path, -S path --database=db_name, -D db_name： --compress, -C：数据压缩传输 --execute=statement, -e statement：非交互模式执行SQL语句； --vertical, -E：查询结果纵向显示； --protocol={TCP|SOCKET|PIPE|MEMORY}： "
},
{
	"uri": "https://devops.lijun.in/zh/kvm/requirements/",
	"title": "Requirements",
	"tags": [],
	"description": "",
	"content": " "
},
{
	"uri": "https://devops.lijun.in/zh/mysql/requirements/sql%E8%AF%AD%E5%8F%A5/",
	"title": "SQL语句",
	"tags": [],
	"description": "",
	"content": " 命令行：mysql\nmysql -u root -p -h 10.0.0.1 -P 3306 --host=host_name, -h host_name：服务端地址； --user=user_name, -u user_name：用户名； --port=port_num, -P port_num：服务端端口； --socket=path, -S path --database=db_name, -D db_name： --compress, -C：数据压缩传输 --execute=statement, -e statement：非交互模式执行SQL语句； --vertical, -E：查询结果纵向显示； --protocol={TCP|SOCKET|PIPE|MEMORY}： 授权 语法： GRANT ALL [PRIVILEGES] ON db.tbl TO \u0026#39;username\u0026#39;@\u0026#39;host\u0026#39; IDENTIFIED BY \u0026#39;password\u0026#39;; 上述语法中，db表示数据库的名字，可以使用*通配，tbl为表的名称，可以使用*通配 grant 权限 on 数据库名.表名 to 用户名@\u0026#34;本地回环地址或localhost\u0026#34; identified by \u0026#34;密码\u0026#34; grant all privileges on zsythink.* to zsy@localhost identified by \u0026#39;zsythink\u0026#39;; grant all privileges on zsythink.* to zsy@127.0.0.1 identified by \u0026#39;zsythink\u0026#39;; 注意：上述两条命令都表示对zsy用户开放zsythink数据库的所有权限，但是上述两条命令的针对的zsy用户是不一样的，一个是zsy@localhost用户，一个是zsy@127.0.0.1用户，mysql会认为这是两个用户。 权时privileges关键字可省，示例如下 MySQL grant all on zsythink.* to zsy@127.0.0.1 identified by \u0026#39;zsythink\u0026#39;; 1 grant all on zsythink.* to zsy@127.0.0.1 identified by \u0026#39;zsythink\u0026#39;; FLUSH PRIVILEGES; select语句的基本用法，select语句的分组与聚合、多表查询等常用语法\n作死语句，数据量大 select * from tb1; 表示从tb1表中查询出所有数据，但是只显示前3行。 select * from tb1 limit 3; 从tb1表中查询出name字段与age字段的数据，即使这样写，也没有比上例的语句好多少，它仍然是显示表中的所有行的指定字段，表中的数据量较大时，这样写也是非常不好的，除非必要，一般不要这样写。 select name,age from tb1; 从tb1表中查询出符合条件的数据，使用where字句给定条件，带有筛选条件的查询语句则会比上面两种查询语句好很多，如下示例中给出常用的条件表达式。 如下语句表示从tb1表中查询出age等于25的行的name和age字段。 select name,age from tb1 where age = 25; 查出tb1表中age不等于28的数据。 select * from tb1 where age != 28; 如下两条语句均表示从tb1表中查询出age大于等于25并且小于等于28的数据。 select * from tb1 where age \u0026gt;= 25 and age \u0026lt;=28; select name,age from tb1 where age between 25 and 28; 如下语句表示从tb1表中查询出age等于25或者等于28的数据。 select * from tb1 where age = 25 or age = 28; 如下语句表示从tb1表中查询出age不在25到28区间中的数据。 select * from tb1 where age not between 25 and 28; select * from tb1 where age \u0026lt; 25 or age \u0026gt; 28; 使用like结合通配符进行模糊查询，如下语句表示查询tb1表中name字段以j开头的数据，\u0026#34;%\u0026#34;在查询语句中表示\u0026#34;任意长度的任意字符\u0026#34;. select * from tb1 where name like \u0026#39;j%\u0026#39;; 如下语句表示查询tb1表中name字段以t开头，并且只有三个字符的数据，\u0026#34;_\u0026#34;在查询语句中表示\u0026#34;任意单个字符\u0026#34;，下例中的语句中，在t后面跟随了两个\u0026#34;_\u0026#34;,表示t后面的两个字符可以是任意字符。 select * from tb1 where name like \u0026#39;t__\u0026#39;; 也许你觉得还不够灵活，或许你更习惯使用正则表达式作为匹配条件，没有关系，满足你，我们可以使用rlike结合正则表达式，对字符数据进行模糊查询，所以，查询语句能有多强大的功能，就看你的正则表达式运用的有多熟练了，示例语句如下。 如下语句表示查询出tb1表中name字段以t开头的所有数据，正则表达式的含义此处不再赘述。 select * from tb1 where name rlike \u0026#39;^t.*\u0026#39;; 我们还可以从指定的列表中匹配对应的条件，使用in关键字指定列表，示例如下，如下语句表示从tb1表中查找出age等于22、23、24或25中的任意一个的行的所有数据。 select * from tb1 where age in (22,23,24,25); 除了使用in，我们还可以使用not in,聪明如你一定秒懂，not in就是in的对立面，比如，查询出tb1表中age不等于28、43、33的数据。 select * from tb1 where age not in (28,33,43); 我们可以对查询出的数据进行排序，如下示例表示查询tb1表中的所有数据，并且按照age的值从小到大进行升序排序，asc表示升序排序，asc可省，默认使用升序排序。 select * from tb1 order by age; select * from tb1 order by age asc; 如下示例表示查询tb1表中的所有数据，并且按照age的值从大到小进行降序排序 select * from tb1 order by age desc; 查询tb1表中的所有数据，并且按照age的值从大到小进行降序排序，如果多行之间的age字段的值相同时，这些行再根据name字段进行升序排序。 select * from tb1 order by age desc,name asc; 我们可以在查询某字段的时候去重，使用DISTINCT关键字表示去重查询，比如，查询学生的年龄并去重显示年龄。 select distinct age from students; 我们也可以在查询时给字段添加别名，以便显示为我们指定的列名。 select name as StuName,age from tb1; select语句中的分组与聚合\nselect语句中group by 的使用，见名知义，group by就是用来分组的。 之所以要对数据进行分组，往往是为了在分组以后，对分组后的数据进行聚合操作 students表中的数据如上图所示\n现在，我们使用students表中的数据，进行分组，我们可以根据性别分组，也可以根据年龄分组。\n比如，我们根据性别对上述数据进行分组，示例如下。\n可以看到，根据性别分组后，只分出了两组，因为性别只有男和女两种性别，所以只分出了两组。\n而且每组只显示一条数据，也就是每组的第一条数据，注意，这可能与我们想象的不太一样，分组后每组只显示一条数据。\n我们说过，分组的目的往往是对分组后的数据进行\u0026quot;聚合操作\u0026rdquo;,设么意思呢？我们先看示例，看完示例再解释，示例如下\n上例中，我们通过性别对数据进行了分组，然后算出了每组中的人员数量，也就是说，我们算出了女性有10人，男性有15人。\n而上例中的count(stuid)就是一种\u0026quot;聚合操作\u0026rdquo;,count()是一种聚合函数，这个聚合函数能够算出对应数据的条目数量。\n上例中的count(stuid)表示算出分组后的每组的stuid的数量，这就是所谓的\u0026quot;分组的目的往往是为了聚合操作\u0026quot;的含义。\n那么，我们再举一个列子，比如，我们仍然按照性别分组，然后，算出男生与女生的平均年龄，可以使用如下语句。\n可以看到，根据性别分组，然后算出每组的平均年龄，男性平均年龄33（普遍成熟稳重），女性平均年龄19（花姑娘大大滴）\n聪明如你一定猜到了，avg( )也是一种聚合函数，avg（age）就是求年龄的平均值。\n那么，mysql中常用的聚合函数有哪些呢，如下？\nmin(col)返回指定列的最小值\nmax(col)返回指定列的最大值\navg（col）返回指定咧的平均值\ncount（col）返回指定列中非null值的个数\nsum（col）返回指定列的所有值之和\ngroup_concat(col)返回指定列的值，但是会分组显示，也就是说分组显示指定列组合后的结果，这样说不容易明白，我们来看个例子，比如，将学生表中的学生按性别分组，并且显示男生组有哪些学生，女生组有哪些学生，示例如下。\n那么，如果我们想要对分组后的信息再次过滤，该怎么办呢，举个例子，如下:\n从上例可以看出，如果想要对分组过后的信息再次过滤，可以使用having关键字。\n好了，此处总结一些常用示例：\n查询students表，以性别为分组，求出分组后的年龄之和。\nMySQL\n   1 select gender,sum(age) from students group by gender;          查询students表，以classid分组，显示平均年龄大于25的classid。\nMySQL\n   1 select classid,avg(age) as avgage from students group by classid having avgage \u0026gt; 25;          查询students表，以性别字段gender分组，显示各组中年龄大于19的学员的年龄的总和。\nMySQL\n   1 select sum(age) from students where age \u0026gt; 19 group by gender;          分组与聚合先总结到这里，下一篇文章中将会总结多表查询的select语句，直达链接 select语句总结之多表查询\n这篇文章将会详细的总结mysql中多表查询的相关语句，即mysql中的 交叉连接、内连接、外链接、左连接、右连接、联合查询、全连接。\n在本博客中，\u0026ldquo;mysql\u0026quot;是一个系列文章，这些文章主要对mysql/mariadb的常用知识点进行了总结，每一篇博客总结的知识点有所不同，具体内容可参考mysql文章列表。\nmysql文章列表直达链接：mysql知识点总结\n多表查询顾名思义就是数据同时从多张表中获得，查询语句牵扯到多张表，多表查询有多种语法，多种使用场景，不同的场景需要不同的语法，我们先不考虑那么多，从头开始理解一下多表查询。\n交叉连接：cross join 既然是多表查询，那么我们先来看看两张非常简单的表，我们就以这两张表为例，进行演示。\n上图中，我们通过两条语句分别查询了表1与表2的内容，t1表中有3条数据，t2表中有2条数据，那么同时查两张表，会查询出什么内容呢？我们来实验一下。\n上图中，我们只是单纯的将两张表使用同一条select语句查询了出来，并没有添加任何额外的过滤条件，仔细观察查询出的数据，可以发现，当使用上图中的语句时，t1表中的每一行记录，都与t2表中的任意一条记录相关联，同样，t2表中的每一行记录，都与t1表中的任意一条记录相关联。\n换句话说，两张表中的数据会以下图中的方式被\u0026quot;交叉连接\u0026quot;在一起，然后展示出来。\n当然，上述示例中,t1表中有3条数据，t2表中有2条数据,所以\u0026quot;交叉连接\u0026quot;后如上图，如果t1表中有3条记录，t2表中也有3条记录，那么交叉连接后的结果如下图。\n我们把上述\u0026quot;没有任何限制条件的连接方式\u0026quot;称之为\u0026quot;交叉连接\u0026rdquo;，\u0026ldquo;交叉连接\u0026quot;后得到的结果跟线性代数中的\u0026quot;笛卡尔乘积\u0026quot;一样。\n可以看到，使用交叉连接时，任意一张表中的记录多出一行，\u0026ldquo;交叉连接\u0026quot;的数量都会增长很多。\n上述示例中，我们只使用了两张表，而且两张表中的数据非常少，如果我们同时将多张表使用上述语句查询，而且每张表中的数据又比较多，那么可以想象，我们得到结果的时间可能会非常长，而且得到结果以后，可能也没有太大的意义，所以，通过交叉连接的方式进行多表查询的这种方法，我们并不常用，而且我们应该尽量避免这种查询。\n\u0026ldquo;交叉连接\u0026quot;的英文原文为\u0026quot;cross join\u0026rdquo;,被咱们翻译为交叉连接，其实，上述示例中的语句我们可以换一种写法，两种写法能够获取到相同的结果，示例如下\n其实，上图中的第一种写法才是官方建议的最标准的写法，即为使用\u0026quot;cross join\u0026quot;将多张表使用\u0026quot;交叉连接\u0026quot;连接起来，当然，上述实例中，我们只使用了t1与t2两张表作为示例，我们也可以将多张表使用\u0026quot;cross join\u0026quot;连接起来，比如将t1,t2,t3三张表使用\u0026quot;cross join\u0026quot;连接起来，示例语句如下：\nMySQL\n   1 select * from t1 cross join t2 cross join t3;          在mysql中，上述查询语句查询出的结果与如下语句相同。\nMySQL\n   1 select * from t1,t2,t3;          内连接：inner join 既然\u0026quot;交叉连接\u0026quot;不常用，那么肯定有其他的常用的\u0026quot;多表查询方式\u0026rdquo;。\n我们来看看另一种常用的多表查询的方式：内连接\n仍然拿刚才的t1表与t2表为例，此处回顾一下这两张表的内容。\n那么什么是\u0026quot;内连接\u0026quot;呢？我们可以把\u0026quot;内连接\u0026quot;理解成\u0026quot;两张表中同时符合某种条件的数据记录的组合\u0026rdquo;，这样说不容易理解，我们来动手做一个小例子，示例如下。\n上图中的sql语句就使用了\u0026quot;内连接\u0026rdquo;，上图中的sql语句查询出了t1表与t2表中id号相同的记录，并把两表中id号相同的记录连接在了一起，我们对比着\u0026quot;内连接\u0026quot;的概念，来理解上图中的sql语句，我们说过内连接就是\u0026quot;两张表中同时符合某种条件的数据记录的组合\u0026rdquo;，那么上图中，\u0026ldquo;where t1.t1id=t2.t2id\u0026quot;就是所谓的\u0026quot;符合某种条件\u0026rdquo;，上图中查询出的结果就是\u0026quot;两张表中同时符合某种条件的数据记录的组合\u0026rdquo;，这其实就是所谓的\u0026quot;内连接\u0026rdquo;。\n聪明如你一定发现了，在mysql中，\u0026ldquo;内连接\u0026quot;的语句与\u0026quot;交叉连接\u0026quot;的语句的不同之处就是\u0026quot;内连接\u0026quot;语句比\u0026quot;交叉连接\u0026quot;有更多的限制条件，这样理解\u0026quot;内连接\u0026rdquo;，会不会容易一点呢？\n\u0026ldquo;内连接\u0026quot;的英文原文为\u0026quot;inner join\u0026rdquo;，所以，刚才的内连接sql语句还能换成另一种写法，两种写法得到的结果是相同的，示例如下。\n上图中的第一种语法才是官方建议的标准写法，所以，我们在使用\u0026quot;内连接\u0026quot;类型的sql语句时，应该尽量采用上图中的第一种写法。内连接的两张表用\u0026quot;inner join\u0026quot;连接在一起，使用\u0026quot;on\u0026quot;指明\u0026quot;条件\u0026rdquo;。\n我们刚才说过，在mysql中，\u0026ldquo;内连接\u0026quot;与\u0026quot;交叉连接\u0026quot;的不同之处就是\u0026quot;内连接\u0026quot;语句比\u0026quot;交叉连接\u0026quot;语句有更多的限制条件，那么如果我们把\u0026quot;内连接\u0026quot;的\u0026quot;限制条件\u0026quot;去掉，得出的结果会与\u0026quot;交叉连接\u0026quot;得出的结果相同吗？我们来做一个\u0026quot;实验\u0026rdquo;。\n从实验结果可以看出，当不附加任何条件时，内连接与交叉连接查询出的结果并没有什么不同，那么反过来想，如果\u0026quot;交叉连接\u0026quot;加上\u0026quot;连接条件\u0026rdquo;，是否与\u0026quot;内连接\u0026quot;查询得到的结果相同呢？我们来试试。\n好了，实验证明，在mysql中，\u0026ldquo;cross join\u0026quot;与\u0026quot;inner join\u0026quot;似乎可以互相替代，但是在通用的sql标准中，这两者是不同的。\n同时我们得出了一个结论，在通常情况下，使用内连接时需要指定连接条件，换句话说，就是使用\u0026quot;inner join\u0026quot;时一定不要忘记使用\u0026quot;on\u0026quot;指明连接条件。\n此刻，你可能还是没有理解什么是内连接，那么我们换一种解释方式，我们用图示的方法描述一遍什么是内连接。\n我们把t1表与t2表当做两个集合，把t1id与t2id分别当这做两个集合中的元素，可以理解为下图。\n还记得我们刚才使用的\u0026quot;内连接\u0026quot;查询语句吗，\u0026ldquo;内连接\u0026quot;查询语句如下。\n即t1id与t2id相同的记录被查询了出来，从结果来看，由于t2表中并不存在id号为1的记录，所以，只查询出了两张表中id号同为2和3的两条记录，用图表示如下\n这就是所谓的\u0026quot;内连接\u0026rdquo;。\n但是，\u0026ldquo;内连接\u0026quot;还能够分为多种，比如\u0026quot;等值连接\u0026quot;和\u0026quot;不等连接\u0026rdquo;，刚才示例中使用的内连接就属于\u0026quot;等值连接\u0026rdquo;，聪明如你一定想到了，内连接是否属于\u0026quot;等值连接\u0026quot;取决于\u0026quot;连接条件\u0026quot;中有没有使用\u0026quot;等号\u0026rdquo;。\n那么我们给出一个\u0026quot;不等连接\u0026quot;的示例，如下。\n上图中的\u0026quot;内连接\u0026quot;就属于\u0026quot;不等连接\u0026rdquo;，同样，下图中的\u0026quot;内连接\u0026quot;也属于\u0026quot;不等连接\u0026rdquo;，只要\u0026quot;连接条件\u0026quot;中没有使用\u0026quot;=\u0026quot;作为连接条件的都为\u0026quot;不等连接\u0026rdquo;\n那么，用\u0026quot;图示\u0026quot;的方法表示上图中的\u0026quot;内连接\u0026quot;语句，可以参考下图。\n从上图中可以发现，使用\u0026quot;内连接\u0026quot;语句查询出的结果集是两个集合中\u0026quot;同时满足条件的数据\u0026quot;的\u0026quot;组合\u0026rdquo;,所以我们并不能单纯的用\u0026quot;交集\u0026quot;去表示这个组合，就以上图为例，按照\u0026quot;交集\u0026quot;的定义，属于集合A且同时属于集合B的元素所组成的集合被称为交集，但是上图中，id号为1的元素只属于t1表，在t2表中并不存在id号为1的元素，但是，上图中\u0026quot;中间\u0026quot;的结果集就是\u0026quot;内连接\u0026quot;查询出的结果，所以，我们不能单纯的用\u0026quot;交集\u0026quot;表示\u0026quot;内连接\u0026rdquo;，但是，我们可以从另一个角度定义\u0026quot;交集\u0026rdquo;，我们定义，\u0026ldquo;交集\u0026quot;为\u0026quot;两个集合中同时满足条件的数据的组合\u0026rdquo;,那么，我们可以把\u0026quot;内连接\u0026quot;查询出的结果集用下图表示。\n通过上图去理解\u0026quot;内连接\u0026rdquo;，可能更容易理解一点。\n其实，\u0026ldquo;内连接\u0026quot;除了\u0026quot;等值连接\u0026quot;与\u0026quot;不等连接\u0026rdquo;，还有一种分类，被称作\u0026quot;自连接\u0026rdquo;，自连接可以理解为比较特殊的\u0026quot;内连接\u0026rdquo;,刚才说到的\u0026quot;等值连接\u0026quot;与\u0026quot;不等连接\u0026quot;所连接的表为两张不同的表，而\u0026quot;自连接\u0026quot;连接的表为一张表，也就是自己连接自己，所以被称为\u0026quot;自连接\u0026rdquo;，什么意思呢，我们来动手做个例子。\n有一张students表，数据如下。\n这张表中存放了\u0026quot;学生\u0026quot;的名字，同时也存放了\u0026quot;老师\u0026quot;的名字,因为这张表里面的学生有可能是其他\u0026quot;学生\u0026quot;的\u0026quot;老师\u0026rdquo;,他们之间互相学习，所以，上表中tid对应的就是学生的id，那么，我们可以通过\u0026quot;自连接\u0026rdquo;,查出每个\u0026quot;学生\u0026quot;的\u0026quot;老师\u0026quot;的名字，示例语句如下。\n上图中的两个sql语句就属于\u0026quot;自连接\u0026rdquo;，自连接把同一张表当做两张表连接了起来，这就是\u0026quot;自连接\u0026rdquo;，很容易理解吧。\n其实在mysql中，\u0026ldquo;inner join\u0026quot;还可以缩写为\u0026quot;join\u0026rdquo;，他们是等效的，示例如下：\n外连接：left join ， right join \u0026ldquo;外连接\u0026quot;分为两种，\u0026ldquo;左外连接\u0026quot;和\u0026quot;右外连接\u0026rdquo;，我们只要搞明白其中的任意一个，就能明白另一个是什么意思，有了之前的\u0026quot;交叉连接\u0026quot;和\u0026quot;内连接\u0026quot;的基础，再看\u0026quot;外连接\u0026rdquo;，就容易多了。\n那么，我们先来了解了解\u0026quot;左外连接\u0026rdquo;，\u0026ldquo;左外链接\u0026quot;的英文原文为\u0026quot;left outer join\u0026rdquo;，我们可以使用\u0026quot;left outer join\u0026quot;将两张表进行左外链接，我们先来动手做个小例子。\n仍然以t1表与t2表为例，老规矩，先回顾一下两张表中的数据。\nt1表与t2表中的数据如上图所示，现在，我们将两张表使用\u0026quot;左外链接\u0026quot;连接起来，示例如下。\n可以看到，上图中查询出的数据似乎跟之前的\u0026quot;内连接\u0026quot;查询出的数据有一部分相同，但是又不是完全相同，我们来对比一下。\n通过对比，我们发现，在同样的连接条件下，\u0026ldquo;左外连接\u0026quot;查询出的数据更多一点，多出的一行记录由t1表中的id号为1的记录和一条\u0026quot;空记录\u0026quot;组成。\n可是t2表中并不存在id号为1的记录啊，为什么不符合连接条件的记录也会出现在查询结果中呢？这就是左外连接的特性。\n左外连接不仅会查询出两表中同时符合条件的记录的组合，同时还会将\u0026quot;left outer join\u0026quot;左侧的表中的不符合条件的记录同时展示出来，由于左侧表中的这一部分记录并不符合连接条件，所以这一部分记录使用\u0026quot;空记录\u0026quot;进行连接。\n换句话说，左外连接\u0026quot;左侧的表\u0026quot;中的所有记录都会被展示出来，左侧表中符合条件的记录将会与右侧表中符合条件的记录相互连接组合，左侧表中不符合条件的记录将会与右侧表中的\u0026quot;空记录\u0026quot;进行连接。\n上述示例中的t1表就是\u0026quot;left outer join\u0026quot;左侧的表，t2表就是\u0026quot;left outer join\u0026quot;右侧的表，连接条件就是t1id=t2id,虽然t1表中id号为1的记录不满足连接条件，但是仍然会被展示出来，t2表中会使用\u0026quot;空记录\u0026quot;与其进行连接，表示t1表中对应的记录是不满足连接条件的记录。\n如果刚才的描述还是不能让你理解左外连接，那么，我们来画个图看看，仍然使用类似之前\u0026quot;内连接\u0026quot;中的\u0026quot;示意图\u0026quot;进行示意。\n上图中，两个彩色的集合组成了左外连接查询出的结果集，看到这里，我想你应该已经明白什么是\u0026quot;左外链接\u0026quot;了，既然明白了\u0026quot;左外连接\u0026rdquo;，那么\u0026quot;右外连接\u0026quot;就更容易理解了，左外连接是以连接左侧的表为准，不管左侧表中的记录是否符合连接条件，都会被显示出来并且右侧的表中会使用空记录与之连接，那么\u0026quot;右外连接\u0026quot;就是以连接右侧的表为准，不管右侧表中的记录是否符合连接条件，都会被显示出来并且左侧的表中会使用空记录与之连接，我们来看一个小例子。\n上述例子中，t2表为\u0026quot;右外连接\u0026quot;右侧的表，t1表为\u0026quot;右外连接\u0026quot;左侧的表，虽然t2表中id号为3的记录并不满足连接条件，但是仍然被展示了出来，t1表中使用空记录与之相连接，那么，用图示的方法表示\u0026quot;右外连接\u0026quot;如下。\n好了，我想我已经把\u0026quot;左外连接\u0026quot;和\u0026quot;右外连接\u0026quot;说明白了。\n使用\u0026quot;左外连接\u0026quot;或者\u0026quot;右外连接\u0026quot;时，有可能所有记录都符合连接条件，这时就不会出现使用\u0026quot;空记录\u0026quot;连接的情况，比如如下情况。\n虽然我们使用了右外链接，但是t2表中的所有记录都满足连接条件，所以，t1表中并不会出现\u0026quot;空记录\u0026quot;与t2表中的记录进行连接。\n其实，\u0026ldquo;左外连接\u0026quot;可以简称为\u0026quot;左连接\u0026rdquo;，\u0026ldquo;右外连接\u0026quot;可以简称为\u0026quot;右连接\u0026rdquo;，\u0026ldquo;left outer join\u0026quot;可以简写为 \u0026ldquo;left join\u0026rdquo; ，同理，\u0026ldquo;right outer join\u0026quot;可以简写为\u0026quot;right join\u0026rdquo;，示例如下。\n其实，我们还可以将左连接与右连接扩展一下，在左连接或者右连接的基础上添加更多的过滤条件，示例如下。\n我们在之前左连接语句的基础上添加了更多限制条件，使用where子句过滤出了t2表中使用\u0026quot;空记录\u0026quot;连接的记录，那么，所查询出的结果一定是t1表中不符合连接条件的记录。这个结果用图表示可能更容易理解，图示如下。\n上述示例中的左连接语句查询出了存在于左侧表中，但是不满足连接条件的数据记录，如上图中的集合所示。\n同理，我们也可以在右连接语句上使用同样的方法，示例如下。\n上图中的右连接语句查询出的结果可以用如下示意图表示。\n似乎，我们能够适应的场景越来越多了，不过我还没有说完，咱们继续聊。\n联合查询：union 与 union all 联合查询比较容易理解，我们可以把联合查询理解成把多个查询语句的查询结果集中在一起显示，语法示例如下。\nselect column_name(s) from table_name1 UNION select column_name(s) from table_name2\n我们来动手做一个小例子，仍然以t1表与t2表为例。\n此处，我们将上图中的两条语句使用union连接起来。\n可以看到，使用union将两条sql语句连接起来以后，两个sql对应的结果集也被集中显示了，是不是很简单。\n从上图可以看出，默认情况下，结果集的字段名以t1表中的为准，如果我们想要以t2表中的为准，可以将t2表对应sql放在union之前，如下。\n当然，我们也可以使用别名，示例如下。\n当使用union连接两个查询语句时，两个语句查询出的字段数量必须相同，否则无法使用union进行联合查询，示例如下。\n上图中的t3表有3个字段，而t2表有两个字段，如果想要使用union将上图中的语句连接，必须使得两个sql的结果集查询出的字段数量相同。\n使用union将两个结果集集中显示时，重复的数据会被合并为一条，示例如下。\n上图中，t2表中的两条记录与t4表中的两条记录完全相同，所以，使用union查询出的重复结果被合并为一条。\n我们能不能让重复的记录都显示出来呢？必须能啊，union all的作用就在于此，示例如下。\n使用union all进行联合查询时，如果两条sql语句存在重复的数据，重复的记录会被展示出来。\n全连接：full join 在之前，我们已经总结了mysql中的\u0026quot;交叉连接\u0026rdquo;、\u0026ldquo;内连接\u0026rdquo;、\u0026ldquo;左连接\u0026rdquo;、\u0026ldquo;右连接\u0026quot;以及\u0026quot;联合查询\u0026quot;的多表查询方式，其实在sql标准中，还有一种被称为\u0026quot;全连接\u0026quot;的多表查询方式，\u0026ldquo;全连接\u0026quot;的英文原文为full join，但是在mysql中并不支持\u0026quot;全连接\u0026rdquo;，更准确的说，mysql中不能直接使用\u0026quot;full join\u0026quot;实现全连接，不过，我们可以变相的实现\u0026quot;全连接\u0026rdquo;,在mysql中，我们可以使用\u0026quot;left join\u0026rdquo;、\u0026ldquo;union\u0026rdquo;、\u0026ldquo;right join\u0026quot;的组合实现所谓的\u0026quot;全连接\u0026rdquo;。\n什么意思呢？空口白话的描述实在费劲，我们动手做个小例子，我们用两张简单的表进行示例，t1表与t5表，数据如下。\n我们先使用左连接查询出对应的数据，如下：\n使用同样的连接条件，再使用右连接查询出对应的数据。\n最后，使用union将两条语句连接在一起，即可以在mysql中实现\u0026quot;全连接\u0026quot;所实现的查询功能，示例如下。\n由于union会将\u0026quot;左连接\u0026quot;与\u0026quot;右连接\u0026quot;查询出的结果集中的重复数据合并，所以，查询出的结果如上图所示。\n如果用图示的方法表示上图中的语句，可以参考如下示意图。\n\u0026ldquo;全连接\u0026quot;可以使用上图中的彩色集合进行示意。\n与\u0026quot;左连接\u0026quot;或者\u0026quot;右连接\u0026quot;一样，\u0026ldquo;全连接\u0026quot;也可以添加更多的连接条件，没错，聪明如你一定想到了，语句如下\n那么上图中的语句用图示表示如下，下图中的绿色集合与紫色集合组成了上图中的\u0026quot;全连接语句\u0026quot;查询出的结果集。\n好了，mysql中的各种常用的多表查询方式我们已经总结完毕，不知道这篇博文对你有没有帮助呢？写博不易，希望大家多多支持，评论和点赞都是免费的哦~嘿嘿嘿~~~！\n"
},
{
	"uri": "https://devops.lijun.in/zh/mysql/requirements/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%97%A5%E5%BF%97/",
	"title": "二进制日志",
	"tags": [],
	"description": "",
	"content": " 在mysql中，我们称二进制日志为binlog，它记录了所有修改了数据库的语句，或者有可能会改变数据库的语句，换句话说，select、show这种不修改数据库的操作，二进制日志是不会进行记录的，二进制日志主要用于时间点恢复（备份恢复），以及主从复制结构。\n二进制日志相关概念 我们先聊聊binlog是怎样用于时间点恢复的。\n假如我们每天晚上12点进行一次数据库备份，此处不考虑数据量，备份时间等其他因素，那么在本次备份完成后到下次备份开始前的这段时间段中，如果数据库服务崩溃了，我们应该怎样恢复呢？\n如果我们只依靠上一次的数据库备份进行恢复，那么我们最多只能恢复到上一个12点时的数据，但是12点以后的数据则会丢失，所以，我们还需要依靠二进制日志（binlog），我们先用上一次的备份将数据库恢复至最近一次12点时的样子，再利用binlog，将12点之后的所有操作\u0026quot;重放\u0026quot;一遍，由于上次备份之时到数据库崩溃之时之间的所有操作完完全全的重新执行了一遍，所以我们可以将数据库中的数据恢复至崩溃之时的样子，而不至于丢失数据，这就是binlog用于恢复时的作用，如果你使用过oracle，那么你肯定会认为，mysql中的binlog与oracle中的归档日志特别像，其实它们存在的目的都是差不多的。\n我们对binlog已经有了初步的概念，我们已经知道，binlog记录了所有的修改了数据库的语句，那么，我们来想一个问题，假设，我们在执行某条修改数据库的语句时，用到了user()函数，那么当我们执行这条语句时，语句根据当前用户的信息修改了数据库，然后这条语句将被记录到binlog中，但是，语句被记录在binlog中时，并没有记录当前用户的信息，而是记录了\u0026quot;user()\u0026ldquo;这个函数本身的几个字符，当我们根据binlog再次重放这条语句时，如果重放这条语句的用户与这条语句被记录时所使用的用户不同，那么语句执行后的结果就不同，这样就导致根据binlog重放操作时，并不能得到与我们预想的完全一致的数据，这种情况在数据恢复时是不允许的，在主从复制时也不是我们期望看到的，所以，为了能够完全的还原日志被记录时的操作，我们应该记录对应语句到底修改了哪些行，并且记录对应语句对这些行进行了哪些修改，只有这样，才能保证我们在重放binlog时，执行的操作与记录日志时的操作是完全一致的，这样是安全了，但是，我们设想一下，如果我们执行了一条update语句，这条update语句涉及到10000行数据的修改，那么，我们就需要将这条sql涉及到的10000行数据修改都记录到binlog中，以便重放二进制日志时，能够还原当时的操作，这样与只记录一条update语句来说，记录的信息量就大的多了，这样想想，这两种记录方式还是各有优势的。当然，到底是让binlog以记录语句的模式进行记录，还是以记录数据修改的模式进行记录，这些都是数据库管理员可以决定的，我们可以设置mysql通过哪种模式记录binlog，mysql中，有三种模式，statement、row、mixed，我们来总结一下binlog的这三种记录模式。\n二进制日志有3种记录方式，三种方式如下：\nstatement模式：记录对数据库做出修改的语句，比如，update A set test='test\u0026rsquo;,如果使用statement模式，那么这条update语句将会被记录到二进制日志中，使用statement模式时，优点是binlog日志量少，IO压力小，性能较高，缺点是为了能够尽量的完全一致的还原操作，除了记录语句本身以外，可能还需要记录一些相关的信息，而且，在使用一些特定的函数时，并不能保证恢复操作与记录时完全一致。\nrow模式：记录对数据库做出修改的语句所影响到的数据行以及这些行的修改，比如，update A set test='test\u0026rsquo;，如果使用row模式，那么这条update语句所影响到的行所对应的修改，将会记录到binlog中，比如，A表中有1000条数据，那么当执行这条update语句以后，由于1000条数据都会被修改，所以会有1000行数据被记录到二进制日志中，以及它们是怎样被修改的，使用row模式时，优点是能够完全的还原或者复制日志被记录时的操作，缺点是记录日志量较大，IO压力大，性能消耗较大。\nmixed模式：混合使用上述两种模式，一般的语句使用statment方式进行保存，如果遇到一些特殊的函数，则使用row模式进行记录，这种记录方式被称之为mixed，看上去这种方式似乎比较美好，但是在生产环境中，为了保险起见，一般会使用row模式。\n管理员可以使用binlog_format变量设置二进制日志的记录方式，为了使配置永久生效，我们可以在my.cnf配置文件中加入如下配置。\nbinlog_format=row\n上述配置表示使用row模式记录binlog\n看完了上述概念以后，是不是已经对二进制日志文件有了一定的了解呢？趁热打铁，我们继续聊二进制日志，先把理论了解完了，再动手实践。\n二进制日志文件，顾名思义，它是二进制的，所以我们不能直接使用cat命令进行查看，而是需要通过一些别的命令查看其内容，而且，二进制日志文件，有\u0026quot;事件\u0026quot;和\u0026quot;位置\u0026quot;的概念，什么是事件呢？通俗的讲，我们可以把binlog中的每一条记录当做一个\u0026quot;事件\u0026rdquo;，因为binlog记录了所有对数据库进行的修改，所以，我们可以认为，数据库的修改被记录到二进制日志中，这些记录每一条都可以理解为一个\u0026quot;事件\u0026rdquo;，由于二进制日志文件是二进制的，所以，我们可以把整个二进制文件想象成一个字节序列，假设，二进制日志文件刚开始是空的，从第1个字节开始记录，假设记录第一个\u0026quot;事件\u0026rdquo;（第一条记录），需要15个字节，那么第一个事件的开始\u0026quot;位置\u0026quot;就是1，结束\u0026quot;位置\u0026quot;就是15，由于前15个字节已经被第一个事件占用，那么当我们想要通过二进制日志记录第二个事件时，则需要从第15个字节向后开始记录，假设记录第二个\u0026quot;事件\u0026quot;需要20个字节，那么第二个事件在binlog中的起始\u0026quot;位置\u0026quot;就是15，结束\u0026quot;位置\u0026quot;就是35，以此类推，这就是二进制日志中，\u0026ldquo;事件\u0026quot;与\u0026quot;位置\u0026quot;的概念，\u0026ldquo;事件\u0026quot;被称为events，\u0026ldquo;位置\u0026quot;被称为position，如果你现在还不能很清晰的理解他们，没有关系，当我们动手实践的时候，你自然会明白。\n二进制日志相关参数 好了，理论理解的差不多了，我们来看看与二进制日志有关的一些参数，有了之前的理论基础，再来了解他们，应该很容易了。\nlog_bin : 此变量用于控制是否开启二进制日志，而且这是一个只读变量，什么意思呢？咱们慢慢聊，默认情况下，当我们启动数据库以后，在当前数据库连接中查看此变量的值，此变量值可能为OFF，表示不记录二进制日志，如果想要记录二进制日志，只需将此值设置为二进制日志的文件名即可，但是需要注意的是，我们无法在当前会话中使用set命令设置log_bin的值，因为它是一个只读变量，我们只能通过修改my.cnf的方式，设置log_bin的值，假设，我们编辑my.cnf文件，设置log_bin的值为mybinlog，那么，在mysql的数据目录中，将会自动生成一个以mybinlog为文件名前缀的二进制日志文件，如果想要再次禁用binlog，只需要将log_bin这一行配置从my.cnf文件中注释即可，或者将其删除，重启mysql服务后，再次查看log_bin的值，其值为OFF，注意，不要直接在my.cnf文件中将log_bin的值设置为ON或者OFF，如果这样做，你将会看到以ON或者OFF为文件名前缀的二进制日志文件。换句话说，如果my.cnf配置文件中没有log_bin的配置，则表示未开启二进制日志，如果my.cnf中存在log_bin的配置，那么则表示开启了二进制日志，同时二进制日志文件的名称将会以log_bin对应的值为文件名前缀，同时，二进制日志文件的后缀名会进行自动编号，每次日志滚动后，后缀名编号自动加1。\nsql_log_bin ：此变量用于标识当前会话中的操作是否会被记录于二进制日志，此变量值设置为ON，则表示在当前数据库连接中，对数据库进行修改的语句将会被记录到binlog中，此变量值设置为OFF，则表示在当前数据库连接中，对数据库进行的修改的语句将不会被记录到binlog中，在主从复制结构中，这些语句由于没有被binlog记录，所以也不会同步到从节点中。换句话说，即使在my.cnf配置文件中设置了log_bin的值，当前会话中，如果sql_log_bin的值设置为OFF，当前会话的操作也不会记录在二进制日志中。而且需要注意的是，sql_log_bin是一个会话界别的变量，只能在当前会话中使用set sql_log_bin命令进行设置，不能使用set global sql_log_bin命令进行设置，因为它是会话级别的变量，而且，sql_log_bin也不能配置在my.cnf文件中，否则可能会无法启动mysql。\nbinlog_format ： 此变量值得含义上文已经解释过，此变量的值决定了二进制日志的记录方式，此变量的值可以设置为statement、row、mixed，分别表示以语句的形式记录二进制日志，以数据修改的形式记录二进制日志，以混合的方式记录二进制日志，安全保险起见，推荐使用row的方式记录。\nmax_binlog_size ：设置单个二进制日志文件的最大大小，以字节为单位，超过此值大小，则二进制日志文件会自动滚动，比如设置为500M为524288000。\nsync_binlog ：还记的我们总结的事务日志的相关文章吗？当我们把innodb_flush_log_at_trx_commit设置为1的时候，表示事务提交时，事务日志立马从内存刷写到磁盘中的事务日志文件中，而sync_binlog对于二进制日志的作用，就像innodb_flush_log_at_trx_commit对于事务日志的作用，由于二进制日志一开始存在于内存（binlog_cache）中，如果将sync_binlog设置为1，则表示每1次事务提交之后，都会立即将内存中的二进制日志立即同步到磁盘中的二进制日志文件中，如果将sync_binlog设置为0，则表示当事务提交之后，mysql不会立即将内存中的binlog刷写到磁盘中的binlog日志文件中，而是由文件系统决定什么时候刷写，这可能取决于文件系统的缓存机制，当此值设置为0时，一旦操作系统宕机，那么将丢失未从内存中同步到磁盘中的binlog，所以，当此值设置为0时，安全性最差，但是性能最高，当此值设置为1时，安全性最高，性能最差，除了将此值设置为0或1，还能设置为N，假设将此值设置为3，则表示每3次事务提交后，将binlog从内存刷写到磁盘一次，值设置的越大，有可能丢失的日志数据将会越多，当然，性能会越好，在追求安全的情况下，推荐设置为1，但是听说，此值设置为0和设置为1时在性能上的差距还是比较明显的，如果设置为0或N，最好为操作系统准备带有备用电源的缓存。\n实践 说了这么多理论，我们来动手实践一下，在实践中，在回过头来看刚才的理论，会更加明了。\n默认情况下，二进制日志可能未开启，查询如下\n我们可以手动修改my.cnf文件，在[mysqld]配置段中加入如下配置，表示开启binlog，并且设置二进制日志文件名前缀为mybinlog。\n重启mysql服务后，再次查看log_bin的值，可以看出，二进制日志功能已经开启。\n查看对应的数据文件目录，发现其中已经存在了以mybinlog开头的二进制日志文件，默认编号从000001开始，而且能看到一个名为mybinlog.index的文件，这个文件的作用我们一会再说。\n回到mysql的命令行下，使用如下两条命令中的任何一条，均可在mysql中查看二进制日志的文件列表\nshow binary logs;\nshow master logs;\n可以看到，目前，mysql中只有一个二进制日志，日志文件名为mybinlog.000001，文件大小为245个字节。\n我们知道，二进制日志记录了对数据库所作出的修改，那么，我们执行一些sql语句，修改一下数据，看看这些语句会不会被记录到二进制日志中。\n首先，我们查看一下二进制日志的记录模式，从下图可以看出，默认的记录模式为statement，那么二进制日志会记录被执行的sql语句。\n现在，我们来执行一些sql，测试一下，看看会不会被二进制日志记录，我们知道，二进制日志只会记录对数据库进行修改的语句，select语句时不会被记录的，所以，我们先执行一条select语句，执行完毕后，再次查看二进制日志的大小，看看其大小会不会发生变化。\n如上图所示，执行select语句后，二进制日志的大小并没有发生变化，那么我们执行一条delete语句试试。\n如上图所示，二进制日志的大小已经改变，当我们执行了delete语句以后，二进制日志文件大小从245个字节变成了442个字节，应该是已经记录了刚才的语句了，为了确定binlog已经记录了刚才的语句，我们来查看一下二进制日志的内容。\n我们可以使用如下语句，查看二进制日志文件的内容。\nshow binlog events in \u0026lsquo;二进制日志文件名\u0026rsquo;;\n示例如下\n从上图可以看出，刚才的删除语句已经被记录到了mybinlog.000001这个二进制日志中，还记得我们执行了delete语句以后，二进制日志文件的大小从245个字节变为了442个字节吗？从上述binlog可以看出，当我们执行了delete语句以后，mysql把这条语句作为了一个单语句事务进行了提交，这是因为我们的autocommit参数设置为了ON，具体原因我们在总结\u0026quot;事务\u0026quot;时已经结束过，此处我们大概描述一下，当我们开启自动提交以后，mysql会把每条sql当做一个单语句事务进行自动提交，所以，在binlog中，我们看到，我们执行了一条delete语句，但是binlog中却自动把这条语句拆分成了3个\u0026quot;事件\u0026rdquo;,事务开始\u0026quot;事件\u0026rdquo;，delete语句执行的\u0026quot;事件\u0026rdquo;，事务提交\u0026quot;事件\u0026rdquo;，而第一个事件的开始\u0026quot;位置\u0026quot;就是245，第三个事件的结束\u0026quot;位置\u0026quot;就是442，这两个数字是不是很眼熟，没错，就是我们执行delete语句前后，二进制日志文件的大小，我们可以把这三个事件看做一个整体，它们之所以被记录到二进制日志中，就是因为我们刚才执行了那条delete语句，而且，仔细看delete语句对应的事件，可以发现，我们只是执行了delete语句，但是事件中自动添加了\u0026quot;use zsythink\u0026rdquo;,这是为了保险起见，确定重放这些语句时不会出现偏差而产生的。上图中，每一条记录都是一个\u0026quot;事件\u0026rdquo;（event），每一个事件都有自己的\u0026quot;开始位置\u0026rdquo;（start position）和\u0026quot;结束位置\u0026rdquo;（end position），这就是我们在理论部分总结的\u0026quot;事件\u0026quot;与\u0026quot;位置\u0026rdquo;。\n其实，我们还能从指定的位置查看二进制日志，示例如下\n也能限制显示出的记录数量，如只显示二进制日志中的前3行，示例如下，\n还能够指定从第几行之后开始，显示几行，例如，从第1行之后开始显示，显示之后的2行\n或者将上述示例结合在一起使用，比如从245位置开始，从245位置之后的第1行开始显示，显示2行。\n我们能够使用如下命令，查看当前在使用哪个二进制日志，以及二进制日志记录到哪一个位置了\nshow master status;\n如上图所示，目前使用的二进制日志是mybinlog.000001,对应记录的位置为442，我们之前说过，二进制日志是会滚动的，当单个二进制日志达到指定的大小，则会滚动，当然，我们也可以手动的进行日志滚动，使用flush logs命令即可滚动二进制日志，重启mysql服务时二进制日志也会自动滚动。那么，我们现在来手动滚动一下二进制日志。\n如下图所示，使用flush logs命令手动滚动二进制日志以后，再次查看二进制日志的状态，已经自动切换使用最新的binlog了，二进制日志文件后缀名自动加一，变为了000002，再次查看二进制日志列表，已经存在两个二进制日志文件了。\n那么我们到文件系统的数据文件路径中查看一下，如下图，已经存在两个二进制日志文件了，这时，我们查看一下mybinlog.index文件，这个文件不是二进制的，可以使用cat命令直接查看。\n如上图所示，mybinlog.index中其实就是记录了有哪些二进制日志文件而已。\n好了，回到mysql中，我们说过，通过sql_log_bin参数，能够控制当前数据库连接会话中的sql语句是否会被记录到binlog中，那么，我们来测试一下。\n首先，查看一下当前的二进制日志文件中的内容，除了一条默认的记录以外，当前二进制日志文件中没有其他任何事件记录。\n那么此时，我们将当前会话中的sql_log_bin设置为OFF，然后执行一条插入语句。\n再次查看当前使用的二进制日志，发现并没有任何新的记录，当我们觉得当前会话中的某些语句没有被记录到二进制日志文件中的必要的时候，则可以将sql_log_bin设置为OFF。\n刚才的操作一直都是在statement模式下进行的实验，现在我们开启sql_log_bin,同时将二进制日志文件的记录模式改为row，再看看二进制日志的记录是什么样的。\n修改my.cnf配置文件，将binlog_format设置为row。\n重启mysql服务后，查看binlog的记录模式，已经改为row\n由于刚才已经重启了mysql服务，所以，binlog自动滚动了，当前使用的二进制日志文件为mybinlog.000003\n现在，执行一条delete语句\n查看二进制日志，记录如下。\n从上图中的记录可以看出，刚才的delete语句并没有被记录，而是被拆分成了两个事件，记录于了二进制日志文件中，而上图中的table_id，就是造成淘宝物流主从复制结构中主从数据不一致的原因，此处不是我们讨论的重点，有兴趣的同学可以在网上搜索如下标题。\n淘宝物流MySQL slave复制数据丢失问题\n那么此处，我们把刚才常用的能够查看binlog信息的语句总结一下：\n查看二进制日志文件列表\nshow master logs;\nshow binary logs;\n查看当前正在使用的二进制日志文件\nshow master status;\n查看二进制日志文件中的事件（查看binlog内容），可以使用如下语句，如果不明白如下语句的含义，可以对照上文中的示例查看，此处只用于总结。\nshow binlog events\nshow binlog events in \u0026lsquo;mybinlog.000001\u0026rsquo;\nshow binlog events in \u0026lsquo;mybinlog.000001\u0026rsquo;from 245\nshow binlog events in \u0026lsquo;mybinlog.000001\u0026rsquo;limit 3\nshow binlog events in \u0026lsquo;mybinlog.000001\u0026rsquo;limit 2,5\nshow binlog events in \u0026lsquo;mybinlog.000001\u0026rsquo;from 245 limit 10\nshow binlog events in \u0026lsquo;mybinlog.000001\u0026rsquo;from 245 limit 4,20\nmysqlbinlog命令 其实，除了在mysql提示符中使用show binlog events命令查看日志内容以外，还能在文件系统中使用mysqlbinlog命令查看对应的二进制日志，比如，查看mybinlog.000001，示例如下\n每个二进制日志文件都会有固定的开头内容，这些内容是一些版本信息和属性信息，如上图中的红色标注内容，我们不用在意它们，我们可能会查看的一般为上图中蓝色标注的内容。\n我们也可以使用如下命令从指定位置开始查看二进制日志。\nmysqlbinlog \u0026ndash;start-position 415 mybinlog.000001\n或者指定，从哪个位置开始，到那个位置结束，查看这之间的二进制日志文件。\nmysqlbinlog \u0026ndash;start-position 317 \u0026ndash;stop-position 442 mybinlog.000001\n还可以从指定的时间开始查看，比如，查看2017年3月4日10点40以后的日志。\nmysqlbinlog \u0026ndash;start-datetime \u0026ldquo;2017-3-4 10:40:00\u0026rdquo; mybinlog.000001;\n当然，也可以指定结束时间，比如\nmysqlbinlog \u0026ndash;start-datetime \u0026ldquo;2017-3-4 10:40:00\u0026rdquo; \u0026ndash;stop-datetime \u0026ldquo;2017-3-4 10:55:00\u0026rdquo; mybinlog.000001;\n好了，关于mysql的binlog就总结到这里，希望这篇文章能对你有所帮助，最后说一句，求收藏···求点赞···求推荐···\n"
},
{
	"uri": "https://devops.lijun.in/zh/mysql/requirements/",
	"title": "操作",
	"tags": [],
	"description": "",
	"content": " "
},
{
	"uri": "https://devops.lijun.in/zh/jenkins/installation/",
	"title": "Instal",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://devops.lijun.in/zh/kvm/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": "KVM KVM是一个基于内核的虚拟机（kernel virtual machine），从Linux内核版本号2.6.20开始已经集成在系统之中。这样要部署虚拟机就不需要额外的软件来支持，效率更高。但是KVM只能虚拟化CPU和内存，对于磁盘、网卡等外设无法模拟，所以需要结合QEMU来模拟其他设备（QEMU虽然也可以模拟CPU和内存，但是效率没有KVM高），也因此KVM其实是QEMU-KVM。\nPS：如果虚拟机有安装VirtIO半虚拟化驱动的话能提高虚拟机性能，好在主流Linux系统已经内置了相关驱动，而Windows虚拟机就需要去KVM下载相关驱动了，查询方法：\nlsmod | grep virtio 亲测，这个是在虚拟机查询，实体机没有 一、宿主机安装KVM\n1、用VMware做实验的话第一步就是开启CPU虚拟化功能 2、检查宿主机CPU虚拟化是否开启、KVM内核是否加载\n1 egrep \u0026ldquo;svm|vmx\u0026rdquo; /proc/cpuinfo #查看CPU是否开启虚拟化（Inter是vmx，AMD是svm），如果过滤出的flags有内容就是已开启了 2 lsmod | grep kvm #查看KVM内核是否加载 这个实体机开启查询。 3、使用yum安装KVM相关软件包\nyum install qemu-kvm libvirt virt-install virt-manager bridge-utils #qemu-kvm：核心软件包，实现虚拟化 #libvirt：核心软件包，管理KVM的工具，类似VMware也是管理虚拟机的工具 #virt-install：KVM虚拟机命令行管理工具 #virt-manager：KVM虚拟机图形化管理工具，可不装 #bridge-utils：实现网卡桥接的工具 4、启动libvirtd服务（如果该服务没启动的话virt-install等工具也无法使用）。该服务启动后系统会新增一块virbr0的网卡，该网卡的地址就是虚拟机使用NAT模式时使用的地址。vmware的NAT也是如此，宿主机一个网卡。\nsystemctl enable libvirtd.service systemctl start libvirtd.service 5.5、为KVM创建桥接网络\nKVM默认使用NAT模式来分配网络给虚拟机，在使用NAT模式时虚拟机可以访问外网，但外网无法直接访问虚拟机。所以生产环境更多是配置网桥实现桥接模式上网，让虚拟机与宿主机处于一个网段中，各自有一个自己的IP，可以把他们看成是一个局域网中的不同电脑。配置桥接模式有2种方式：\n通过命令行配置桥接模式，该命令会修改配置文件实现永久生效\n1 virsh iface-bridge eth0 br0 #把eth0网卡绑定到br0中\n手动编辑配置文件实现桥接模式：\nvim /etc/sysconfig/network-scripts/ifcfg-br0 #为br0新建配置文件 DEVICE=br0 TYPE=Bridge #类型为桥接 BOOTPROTO=static IPADDR=192.168.1.100 #配置能上网的IP地址，通常就是之前主机的IP NETMASK=255.255.255.0 GATEWAY=192.168.1.1 ONBOOT=yes vim /etc/sysconfig/network-scripts/ifcfg-eth0 #将eth0绑定到桥接网络中 DEVICE=eth0 BRIDGE=br0 #这句就是把eth0桥接到br0 ONBOOT=yes 也可以通过命令行模式配置网卡，但是一定要把这些命令写到脚本中一起执行，否则网络就断了 #!/bin/bash brctl addbr br0 #增加一块网卡 brctl addif br0 eth0 #让eth0网卡成为br0网卡的一员 ip addr del dev eth0 192.168.1.100/24 #删掉eth0的IP地址，因为BR0已经有这样的地址了 route add default gw 192.168.1.1 #增加网关\n操作完成后查看网络信息会发现eth0已经没有IP了，而新生成的br0网卡有了对应的IP，且是UP状态。也可以通过brctl show命令查看网卡绑定关系\n[root@lykj-dell-manager20 ~]# brctl show bridge name\tbridge id\tSTP enabled\tinterfaces br0\t8000.20040fef0dec\tno\tem1 vnet0 docker0\t8000.0242b5db39e0\tno\tvirbr0\t8000.525400c9d639\tyes\tvirbr0-nic "
},
{
	"uri": "https://devops.lijun.in/zh/mysql/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": "The following steps are here to help you initialize your new website. If you don\u0026rsquo;t know Hugo at all, we strongly suggest you learn more about it by following this great documentation for beginners.\nCreate your project 啊实打实 Hugo provides a new command to create a new website.\nhugo new site \u0026lt;new_project\u0026gt; Install the theme 撒大苏打 Install the Hugo-theme-learn theme by following this documentation\nThis theme\u0026rsquo;s repository is: https://github.com/matcornic/hugo-theme-learn.git\nAlternatively, you can download the theme as .zip file and extract it in the themes directory\nBasic configuration When building the website, you can set a theme by using --theme option. However, we suggest you modify the configuration file (config.toml) and set the theme as the default. You can also add the [outputs] section to enable the search functionality.\n# Change the default theme to be use when building the site with Hugo theme = \u0026#34;hugo-theme-learn\u0026#34; # For search functionality [outputs] home = [ \u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] Create your first chapter page Chapters are pages that contain other child pages. It has a special layout style and usually just contains a chapter name, the title and a brief abstract of the section.\n### Chapter 1 # Basics Discover what this Hugo theme is all about and the core concepts behind it. renders as\nHugo-theme-learn provides archetypes to create skeletons for your website. Begin by creating your first chapter page with the following command\nhugo new --kind chapter basics/_index.md By opening the given file, you should see the property chapter=true on top, meaning this page is a chapter.\nBy default all chapters and pages are created as a draft. If you want to render these pages, remove the property draft: true from the metadata.\nCreate your first content pages Then, create content pages inside the previously created chapter. Here are two ways to create content in the chapter:\nhugo new basics/first-content.md hugo new basics/second-content/_index.md Feel free to edit thoses files by adding some sample content and replacing the title value in the beginning of the files.\nLaunching the website locally Launch by using the following command:\nhugo serve Go to http://localhost:1313\nYou should notice three things:\n You have a left-side Basics menu, containing two submenus with names equal to the title properties in the previously created files. The home page explains how to customize it by following the instructions. When you run hugo serve, when the contents of the files change, the page automatically refreshes with the changes. Neat!  Build the website When your site is ready to deploy, run the following command:\nhugo A public folder will be generated, containing all static content and assets for your website. It can now be deployed on any web server.\nThis website can be automatically published and hosted with Netlify (Read more about Automated HUGO deployments with Netlify). Alternatively, you can use Github pages\n "
},
{
	"uri": "https://devops.lijun.in/zh/docker/docker-registry/registry/",
	"title": "Registry",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://devops.lijun.in/zh/ansible/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": "Global site parameters On top of Hugo global configuration, Hugo-theme-learn lets you define the following parameters in your config.toml (here, values are default).\nNote that some of these parameters are explained in details in other sections of this documentation.\n[params] # Prefix URL to edit current page. Will display an \u0026#34;Edit this page\u0026#34; button on top right hand corner of every page. # Useful to give opportunity to people to create merge request for your doc. # See the config.toml file from this documentation site to have an example. editURL = \u0026#34;\u0026#34; # Author of the site, will be used in meta information author = \u0026#34;\u0026#34; # Description of the site, will be used in meta information description = \u0026#34;\u0026#34; # Shows a checkmark for visited pages on the menu showVisitedLinks = false # Disable search function. It will hide search bar disableSearch = false # Javascript and CSS cache are automatically busted when new version of site is generated. # Set this to true to disable this behavior (some proxies don\u0026#39;t handle well this optimization) disableAssetsBusting = false # Set this to true to disable copy-to-clipboard button for inline code. disableInlineCopyToClipBoard = false # A title for shortcuts in menu is set by default. Set this to true to disable it. disableShortcutsTitle = false # When using mulitlingual website, disable the switch language button. disableLanguageSwitchingButton = false # Hide breadcrumbs in the header and only show the current page title disableBreadcrumb = true # Hide Next and Previous page buttons normally displayed full height beside content disableNextPrev = true # Order sections in menu by \u0026#34;weight\u0026#34; or \u0026#34;title\u0026#34;. Default to \u0026#34;weight\u0026#34; ordersectionsby = \u0026#34;weight\u0026#34; # Change default color scheme with a variant one. Can be \u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;green\u0026#34;. themeVariant = \u0026#34;\u0026#34; # Provide a list of custom css files to load relative from the `static/` folder in the site root. custom_css = [\u0026#34;css/foo.css\u0026#34;, \u0026#34;css/bar.css\u0026#34;] Activate search If not already present, add the follow lines in the same config.toml file.\n[outputs] home = [ \u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] Learn theme uses the last improvement available in hugo version 20+ to generate a json index file ready to be consumed by lunr.js javascript search engine.\n Hugo generate lunrjs index.json at the root of public folder. When you build the site with hugo server, hugo generates it internally and of course it doesn’t show up in the filesystem\n "
},
{
	"uri": "https://devops.lijun.in/zh/gitlab/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": "Global site parameters On top of Hugo global configuration, Hugo-theme-learn lets you define the following parameters in your config.toml (here, values are default).\nNote that some of these parameters are explained in details in other sections of this documentation.\n[params] # Prefix URL to edit current page. Will display an \u0026#34;Edit this page\u0026#34; button on top right hand corner of every page. # Useful to give opportunity to people to create merge request for your doc. # See the config.toml file from this documentation site to have an example. editURL = \u0026#34;\u0026#34; # Author of the site, will be used in meta information author = \u0026#34;\u0026#34; # Description of the site, will be used in meta information description = \u0026#34;\u0026#34; # Shows a checkmark for visited pages on the menu showVisitedLinks = false # Disable search function. It will hide search bar disableSearch = false # Javascript and CSS cache are automatically busted when new version of site is generated. # Set this to true to disable this behavior (some proxies don\u0026#39;t handle well this optimization) disableAssetsBusting = false # Set this to true to disable copy-to-clipboard button for inline code. disableInlineCopyToClipBoard = false # A title for shortcuts in menu is set by default. Set this to true to disable it. disableShortcutsTitle = false # When using mulitlingual website, disable the switch language button. disableLanguageSwitchingButton = false # Hide breadcrumbs in the header and only show the current page title disableBreadcrumb = true # Hide Next and Previous page buttons normally displayed full height beside content disableNextPrev = true # Order sections in menu by \u0026#34;weight\u0026#34; or \u0026#34;title\u0026#34;. Default to \u0026#34;weight\u0026#34; ordersectionsby = \u0026#34;weight\u0026#34; # Change default color scheme with a variant one. Can be \u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;green\u0026#34;. themeVariant = \u0026#34;\u0026#34; # Provide a list of custom css files to load relative from the `static/` folder in the site root. custom_css = [\u0026#34;css/foo.css\u0026#34;, \u0026#34;css/bar.css\u0026#34;] Activate search If not already present, add the follow lines in the same config.toml file.\n[outputs] home = [ \u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] Learn theme uses the last improvement available in hugo version 20+ to generate a json index file ready to be consumed by lunr.js javascript search engine.\n Hugo generate lunrjs index.json at the root of public folder. When you build the site with hugo server, hugo generates it internally and of course it doesn’t show up in the filesystem\n "
},
{
	"uri": "https://devops.lijun.in/zh/maven/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": "Global site parameters On top of Hugo global configuration, Hugo-theme-learn lets you define the following parameters in your config.toml (here, values are default).\nNote that some of these parameters are explained in details in other sections of this documentation.\n[params] # Prefix URL to edit current page. Will display an \u0026#34;Edit this page\u0026#34; button on top right hand corner of every page. # Useful to give opportunity to people to create merge request for your doc. # See the config.toml file from this documentation site to have an example. editURL = \u0026#34;\u0026#34; # Author of the site, will be used in meta information author = \u0026#34;\u0026#34; # Description of the site, will be used in meta information description = \u0026#34;\u0026#34; # Shows a checkmark for visited pages on the menu showVisitedLinks = false # Disable search function. It will hide search bar disableSearch = false # Javascript and CSS cache are automatically busted when new version of site is generated. # Set this to true to disable this behavior (some proxies don\u0026#39;t handle well this optimization) disableAssetsBusting = false # Set this to true to disable copy-to-clipboard button for inline code. disableInlineCopyToClipBoard = false # A title for shortcuts in menu is set by default. Set this to true to disable it. disableShortcutsTitle = false # When using mulitlingual website, disable the switch language button. disableLanguageSwitchingButton = false # Hide breadcrumbs in the header and only show the current page title disableBreadcrumb = true # Hide Next and Previous page buttons normally displayed full height beside content disableNextPrev = true # Order sections in menu by \u0026#34;weight\u0026#34; or \u0026#34;title\u0026#34;. Default to \u0026#34;weight\u0026#34; ordersectionsby = \u0026#34;weight\u0026#34; # Change default color scheme with a variant one. Can be \u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;green\u0026#34;. themeVariant = \u0026#34;\u0026#34; # Provide a list of custom css files to load relative from the `static/` folder in the site root. custom_css = [\u0026#34;css/foo.css\u0026#34;, \u0026#34;css/bar.css\u0026#34;] Activate search If not already present, add the follow lines in the same config.toml file.\n[outputs] home = [ \u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] Learn theme uses the last improvement available in hugo version 20+ to generate a json index file ready to be consumed by lunr.js javascript search engine.\n Hugo generate lunrjs index.json at the root of public folder. When you build the site with hugo server, hugo generates it internally and of course it doesn’t show up in the filesystem\n "
},
{
	"uri": "https://devops.lijun.in/zh/mysql/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": "MySQL 5.7 Reference Manual MySQl binlog binlog 就是binary log，二进制日志文件，这个文件记录了MySQL所有的DML操作。通过binlog日志我们可以做数据恢复，增量备份，主主复制和主从复制等等。 binlog开启成功之后，binlog文件的位置可以在my.inf配置文件中查看。也可以在MySQL的命令行中查看 mysqlbinlog\nbinlog日志，里面\n# at postion 开头 ... /*!*/； 结束 # at 77073771 #200604 14:44:09 server id 1 end_log_pos 77073836 CRC32 0x9afd36c0 Anonymous_GTID\tlast_committed=5046\tsequence_number=5047\trbr_only=yes /*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*//*!*/; SET @@SESSION.GTID_NEXT= \u0026#39;ANONYMOUS\u0026#39;/*!*/; 主要分为两个部分\nbinlog的相关概念 怎么解析binlog\nbinlog是记录所有数据库表结构变更（例如CREATE、ALTER TABLE…）以及表数据修改（INSERT、UPDATE、DELETE…）的二进制日志。 binlog不会记录SELECT和SHOW这类操作，因为这类操作对数据本身并没有修改，但你可以通过查询通用日志来查看MySQL执行过的所有语句。\n多说一句，如果update操作没有造成数据变化，也是会记入binlog。\n"
},
{
	"uri": "https://devops.lijun.in/zh/prometheus/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": "Global site parameters On top of Hugo global configuration, Hugo-theme-learn lets you define the following parameters in your config.toml (here, values are default).\nNote that some of these parameters are explained in details in other sections of this documentation.\n[params] # Prefix URL to edit current page. Will display an \u0026#34;Edit this page\u0026#34; button on top right hand corner of every page. # Useful to give opportunity to people to create merge request for your doc. # See the config.toml file from this documentation site to have an example. editURL = \u0026#34;\u0026#34; # Author of the site, will be used in meta information author = \u0026#34;\u0026#34; # Description of the site, will be used in meta information description = \u0026#34;\u0026#34; # Shows a checkmark for visited pages on the menu showVisitedLinks = false # Disable search function. It will hide search bar disableSearch = false # Javascript and CSS cache are automatically busted when new version of site is generated. # Set this to true to disable this behavior (some proxies don\u0026#39;t handle well this optimization) disableAssetsBusting = false # Set this to true to disable copy-to-clipboard button for inline code. disableInlineCopyToClipBoard = false # A title for shortcuts in menu is set by default. Set this to true to disable it. disableShortcutsTitle = false # When using mulitlingual website, disable the switch language button. disableLanguageSwitchingButton = false # Hide breadcrumbs in the header and only show the current page title disableBreadcrumb = true # Hide Next and Previous page buttons normally displayed full height beside content disableNextPrev = true # Order sections in menu by \u0026#34;weight\u0026#34; or \u0026#34;title\u0026#34;. Default to \u0026#34;weight\u0026#34; ordersectionsby = \u0026#34;weight\u0026#34; # Change default color scheme with a variant one. Can be \u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;green\u0026#34;. themeVariant = \u0026#34;\u0026#34; # Provide a list of custom css files to load relative from the `static/` folder in the site root. custom_css = [\u0026#34;css/foo.css\u0026#34;, \u0026#34;css/bar.css\u0026#34;] Activate search If not already present, add the follow lines in the same config.toml file.\n[outputs] home = [ \u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] Learn theme uses the last improvement available in hugo version 20+ to generate a json index file ready to be consumed by lunr.js javascript search engine.\n Hugo generate lunrjs index.json at the root of public folder. When you build the site with hugo server, hugo generates it internally and of course it doesn’t show up in the filesystem\n "
},
{
	"uri": "https://devops.lijun.in/zh/terraform/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": "Global site parameters On top of Hugo global configuration, Hugo-theme-learn lets you define the following parameters in your config.toml (here, values are default).\nNote that some of these parameters are explained in details in other sections of this documentation.\n[params] # Prefix URL to edit current page. Will display an \u0026#34;Edit this page\u0026#34; button on top right hand corner of every page. # Useful to give opportunity to people to create merge request for your doc. # See the config.toml file from this documentation site to have an example. editURL = \u0026#34;\u0026#34; # Author of the site, will be used in meta information author = \u0026#34;\u0026#34; # Description of the site, will be used in meta information description = \u0026#34;\u0026#34; # Shows a checkmark for visited pages on the menu showVisitedLinks = false # Disable search function. It will hide search bar disableSearch = false # Javascript and CSS cache are automatically busted when new version of site is generated. # Set this to true to disable this behavior (some proxies don\u0026#39;t handle well this optimization) disableAssetsBusting = false # Set this to true to disable copy-to-clipboard button for inline code. disableInlineCopyToClipBoard = false # A title for shortcuts in menu is set by default. Set this to true to disable it. disableShortcutsTitle = false # When using mulitlingual website, disable the switch language button. disableLanguageSwitchingButton = false # Hide breadcrumbs in the header and only show the current page title disableBreadcrumb = true # Hide Next and Previous page buttons normally displayed full height beside content disableNextPrev = true # Order sections in menu by \u0026#34;weight\u0026#34; or \u0026#34;title\u0026#34;. Default to \u0026#34;weight\u0026#34; ordersectionsby = \u0026#34;weight\u0026#34; # Change default color scheme with a variant one. Can be \u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;green\u0026#34;. themeVariant = \u0026#34;\u0026#34; # Provide a list of custom css files to load relative from the `static/` folder in the site root. custom_css = [\u0026#34;css/foo.css\u0026#34;, \u0026#34;css/bar.css\u0026#34;] Activate search If not already present, add the follow lines in the same config.toml file.\n[outputs] home = [ \u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] Learn theme uses the last improvement available in hugo version 20+ to generate a json index file ready to be consumed by lunr.js javascript search engine.\n Hugo generate lunrjs index.json at the root of public folder. When you build the site with hugo server, hugo generates it internally and of course it doesn’t show up in the filesystem\n "
},
{
	"uri": "https://devops.lijun.in/zh/zabbix/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": "Global site parameters On top of Hugo global configuration, Hugo-theme-learn lets you define the following parameters in your config.toml (here, values are default).\nNote that some of these parameters are explained in details in other sections of this documentation.\n[params] # Prefix URL to edit current page. Will display an \u0026#34;Edit this page\u0026#34; button on top right hand corner of every page. # Useful to give opportunity to people to create merge request for your doc. # See the config.toml file from this documentation site to have an example. editURL = \u0026#34;\u0026#34; # Author of the site, will be used in meta information author = \u0026#34;\u0026#34; # Description of the site, will be used in meta information description = \u0026#34;\u0026#34; # Shows a checkmark for visited pages on the menu showVisitedLinks = false # Disable search function. It will hide search bar disableSearch = false # Javascript and CSS cache are automatically busted when new version of site is generated. # Set this to true to disable this behavior (some proxies don\u0026#39;t handle well this optimization) disableAssetsBusting = false # Set this to true to disable copy-to-clipboard button for inline code. disableInlineCopyToClipBoard = false # A title for shortcuts in menu is set by default. Set this to true to disable it. disableShortcutsTitle = false # When using mulitlingual website, disable the switch language button. disableLanguageSwitchingButton = false # Hide breadcrumbs in the header and only show the current page title disableBreadcrumb = true # Hide Next and Previous page buttons normally displayed full height beside content disableNextPrev = true # Order sections in menu by \u0026#34;weight\u0026#34; or \u0026#34;title\u0026#34;. Default to \u0026#34;weight\u0026#34; ordersectionsby = \u0026#34;weight\u0026#34; # Change default color scheme with a variant one. Can be \u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;green\u0026#34;. themeVariant = \u0026#34;\u0026#34; # Provide a list of custom css files to load relative from the `static/` folder in the site root. custom_css = [\u0026#34;css/foo.css\u0026#34;, \u0026#34;css/bar.css\u0026#34;] Activate search If not already present, add the follow lines in the same config.toml file.\n[outputs] home = [ \u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] Learn theme uses the last improvement available in hugo version 20+ to generate a json index file ready to be consumed by lunr.js javascript search engine.\n Hugo generate lunrjs index.json at the root of public folder. When you build the site with hugo server, hugo generates it internally and of course it doesn’t show up in the filesystem\n "
},
{
	"uri": "https://devops.lijun.in/zh/docker/docker-registry/harbor/",
	"title": "Harbor",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://devops.lijun.in/zh/jenkins/style-customization/",
	"title": "Java微服务Docker构建",
	"tags": [],
	"description": "",
	"content": " 部署微服务组件 - Docker\n Jenkins 插件 * GitLab Plugin * GitLab Hook Plugin \u0026gt; 场景：此版本为无镜像仓库，删除上一版镜像，重新生成新的镜像，遇到问题时，无法及时回滚。 echo \u0026#34;###############################当前构建的服务是${PROJECT}################################\u0026#34; echo \u0026#34;*** Post Steps *** Build/Publish Docker Images \u0026amp; Send files or Execute Commands Over SSH\u0026#34; image_name=${PROJECT} let pre_build_number=${BUILD_NUMBER}-1 cur_run_container=$(docker ps -a|grep ${image_name}:v|awk \u0026#39;{print $1}\u0026#39;) im=$(docker images | grep ${image_name} | awk \u0026#39;{print $3}\u0026#39;| grep -v grep | tail -n 1) if [ \u0026#34;$cur_run_container\u0026#34; != \u0026#34;\u0026#34; ];then docker stop $cur_run_container docker rm $cur_run_container # docker rmi -f ${image_name}:v$pre_build_number docker rmi -f $im # 通过修改tag，来修改docker name:tag,方便及时回滚 # docker tag fi #docker run -dit $MEMORY --name ${image_name}v${BUILD_NUMBER} -v /data/user:/data/user -v /data/chinartn-log/${image_name}:/run/target -p $SER_PORT:$SER_PORT ${image_name}:v${BUILD_NUMBER} # 创建一个新的容器 docker run -dit --name ${image_name}v${BUILD_NUMBER} -v /data/user:/data/user -v /data/chinartn-log/${image_name}:/run/target -p $SER_PORT:$SER_PORT ${image_name}:v${BUILD_NUMBER} "
},
{
	"uri": "https://devops.lijun.in/zh/mysql/style-customization/",
	"title": "备份脚本",
	"tags": [],
	"description": "",
	"content": "备份脚本\n#!/bin/bash Back_Path=/data/backup/mysqlback LogFile=/data/backup/mysqlback/sqlbak.log BAS=bladex if [ ! -d $Back_Path ]; then mkdir -p $Back_Path fi cd $Back_Path sudo echo \u0026#34;-------------------------------------------\u0026#34; \u0026gt;\u0026gt; $LogFile sudo echo $(date +\u0026#34;%y-%m-%d %H:%M:%S\u0026#34;) \u0026gt;\u0026gt; $LogFile sudo echo \u0026#34;开始备份！\u0026#34; \u0026gt;\u0026gt; $LogFile /usr/local/mysql/bin/mysqldump --no-defaults -uroot -poneinstack -F $BAS \u0026gt; $BAS$(date +%Y_%m_%d).sql \u0026amp;\u0026amp; tar -zcf $BAS$(date +%Y_%m_%d).tar.gz $BAS$(date +%Y_%m_%d).sql \u0026amp;\u0026amp; rm -rf $BAS$(date +%Y_%m_%d).sql #mysqldump -uroot -pKeYpZrZx --database weskit \u0026gt; weskit_$(date +%Y_%m_%d).sql find $Back_Path -mtime +20 -name \u0026#34;*.gz\u0026#34; -exec rm -rf {} \\; echo $(date +\u0026#34;%y-%m-%d %H:%M:%S\u0026#34;) \u0026gt;\u0026gt; $LogFile echo \u0026#34;备份结束！\u0026#34; \u0026gt;\u0026gt; $LogFile echo \u0026#34;-------------------------------------------\u0026#34; \u0026gt;\u0026gt; $LogFile "
},
{
	"uri": "https://devops.lijun.in/zh/mysql/style-customization/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/",
	"title": "配置文件",
	"tags": [],
	"description": "",
	"content": "read_rnd_buffer_size = 8M sort_buffer_size = 8M join_buffer_size = 8M key_buffer_size = 256M thread_cache_size = 64 sql_mode=NO_ENGINE_SUBSTITUTION query_cache_type = 1 query_cache_size = 64M query_cache_limit = 2M ft_min_word_len = 4 log_bin = mysql-bin binlog_format = mixed expire_logs_days = 7 log_error = /data/mysql/mysql-error.log #log = /data/mysql/mysql.log slow_query_log = 1 long_query_time = 1 slow_query_log_file = /data/mysql/mysql-slow.log performance_schema = 0 explicit_defaults_for_timestamp lower_case_table_names = 1 skip-external-locking default_storage_engine = InnoDB #default-storage-engine = MyISAM innodb_file_per_table = 1 innodb_open_files = 500 innodb_buffer_pool_size = 1024M innodb_write_io_threads = 4 innodb_read_io_threads = 4 innodb_thread_concurrency = 0 innodb_purge_threads = 1 innodb_flush_log_at_trx_commit = 2 innodb_log_buffer_size = 2M innodb_log_file_size = 32M innodb_log_files_in_group = 3 innodb_max_dirty_pages_pct = 90 innodb_lock_wait_timeout = 120 bulk_insert_buffer_size = 8M myisam_sort_buffer_size = 64M myisam_max_sort_file_size = 10G myisam_repair_threads = 1 interactive_timeout = 28800 wait_timeout = 28800 [mysqldump] quick max_allowed_packet = 500M [myisamchk] key_buffer_size = 256M sort_buffer_size = 8M read_buffer = 4M write_buffer = 4M "
},
{
	"uri": "https://devops.lijun.in/zh/",
	"title": "Learn Theme for Hugo",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://devops.lijun.in/zh/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://devops.lijun.in/zh/credits/",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": "Contributors Thanks to them for making Open Source Software a better place !\nAnd a special thanks to @vjeantet for his work on docdock, a fork of hugo-theme-learn. v2.0.0 of this theme is inspired by his work.\nPackages and libraries  mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services\u0026hellip; horsey - Progressive and customizable autocomplete component clipboard.js - copy text to clipboard highlight.js - Javascript syntax highlighter modernizr - A JavaScript toolkit that allows web developers to use new CSS3 and HTML5 features while maintaining a fine level of control over browsers that don\u0026rsquo;t support  Tooling  Netlify - Continuous deployement and hosting of this documentation Hugo  "
},
{
	"uri": "https://devops.lijun.in/zh/showcase/",
	"title": "Showcase",
	"tags": [],
	"description": "",
	"content": "TAT by OVH Tshark.dev by Ross Jacobs inteliver by Amir Lavasani "
},
{
	"uri": "https://devops.lijun.in/zh/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]